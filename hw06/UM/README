Written By: 
        Max Regardie & Vir Bhatia

Help Received:
        TA Office Hours


Assembly code and Timing:
        In the final UM, allocating and freeing memory (malloc and free) are 
        the routines which take up the most time. Also, we have a sequence
        where we store the availibility of segment indices which takes some
        time as well. All of the sequence calls (Seq_get, Seq_length, etc.)
        take up a good amount of time as well.

        One part of the assembly that is taking up a significant portion
        of our programs time is all of the shifting left and right for 
        unpacking values from the codewords. Every few lines in the assembly
        has a shift and we think that it significantly slows down the program.
        Shifts in C are fast, but we have so many in our code. We think that
        the assembly could be improved upon if there was only 3 shifts per 
        word instead of 6. The assembly wastes a lot of time shifting
        over and over the same word and could be improved if it saved values.

        Another part of the assembly code which takes a sizeable portion of
        time is in the load program instruction, where the program must loop
        through the entire contents of a segment and copy them over into a 
        different location. The process of iterating and copying over an
        entire array is slow and could potentially be redesigned and optimized.
        Even though array access is fast in C, this process requires moving and
        reading values from registers to an immense degree. If the assembly code
        could avoid incessant reading and moving of register values, it could
        be improved.
        
Time Spent on Problem Analysis:
        6 hours


Time Spent on Problem Solving Post-Analysis:
        5 Hours